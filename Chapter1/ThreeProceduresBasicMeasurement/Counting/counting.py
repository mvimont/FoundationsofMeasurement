#covers contents of 1.1.2 Counting Units, pp 3-5
from Chapter1.ThreeProceduresBasicMeasurement.Ordinal.OrdinalClass import Ordinal

def concatenation(a, b):
    return a + b

def copy(a):
    return a

#below function could easily use sum() or multiplication,
# but goal is to derive calculations based on formulas explicitly described in the text

def standard_sequence(a, number):
    sequence = []
    sum = 0
    for duplicate in range(number):
        sum = sum + copy(a)
        sequence.append(sum)
    return sequence

#procedures of counting using standard sequence:
#1 the numbers obtained form a satisfactory ordinal measurecopies

def is_ordinal(seq_list):
    ord = Ordinal()
    for item in seq_list:
        loc = seq_list.index(item)
        if seq_list.count(item) > 1:
            return False
        if ord.is_equivalent(loc, 0):
            continue
        if ord.is_equivalent(loc, seq_list.index(seq_list[-1])):
            return True
        if ord.is_greater(item, seq_list[loc - 1]) and ord.is_greater(seq_list[loc + 1], item):
            continue
        else:
            return False

#2 the numbers assigned are additive with respect to concatenation
#This condition is too trivial to represent in Python, and least simply, at wouuld need a lower level to represent.
#Essentially asserts that concatenation of any two elements in series equal to their addition.

#3 regardless of unit, ratios of numeric assignment uniquely determined by procedure
#i.e. the more precise the standard of measurement used, the close unit + unit + unit will equal 3 * unit
#In this space, we can simply assert divisibility by the specified unit, which will be the first item in a sequence
#generated by standard_sequence
def is_ratio(seq_list):
    ord = Ordinal()
    base_unit = seq_list[0]
    for item in seq_list:
        if ord.is_equivalent(item % base_unit, 0):
            continue
        else:
            return False
    return True

def valid_standard_seq_counting(seq_list):
    if is_ratio(seq_list) and is_ordinal(seq_list):
        return True
    return False


if __name__=="__main__":
    l = standard_sequence(2, 20)
    if valid_standard_seq_counting(l):
        print('Valid counting procedure using standard sequence')
    else:
        print('Invalid counting procedure using standard sequence')
